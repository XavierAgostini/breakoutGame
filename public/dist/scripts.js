"use strict";function draw(){ctx.clearRect(0,0,canvasWidth,canvasHeight),ctx.fillStyle="black",paddlePosition(),ctx.fillRect(paddle.posX,paddle.posY,paddle.width,paddle.height),ballPhysics(),refreshBlocks(blocks),ctx.beginPath(),ctx.arc(ball.posX,ball.posY,ball.radius,0,2*Math.PI,!1),ctx.fillStyle="white",ctx.fill(),ctx.stroke(),updateScore()}function generateInitialBlocks(){for(var l=blockWidth,e=blockHeight,a=0,t=0,o=0,s=[],i=0;i<5;i++){a=12,t+=e+5;for(var c=0;c<10;c++)ctx.fillStyle=blockColors[i],ctx.fillRect(a,t,l,e),s.push({id:o,posX:a,posY:t,color:blockColors[i],level:i,active:!0}),a+=l+5,o++}return s}function refreshBlocks(l){for(var e=0,a=0;a<l.length;a++)blockHit(l[a])&&(gameComplete()&&gameOver(),e++,e>1&&(ball.velY*=-1)),l[a].active&&(ctx.fillStyle=l[a].color,ctx.fillRect(l[a].posX,l[a].posY,blockWidth,blockHeight))}function blockHit(l){var e=!1,a=blocks[blocks.length-1].posY+blockHeight;if(ball.posY-ball.radius<=a&&l.active)for(var t=({x:ball.posX,y:ball.posY-ball.radius},{x:ball.posX+ball.radius,y:ball.posY},{x:ball.posX,y:ball.posY+ball.radius},{x:ball.posX-ball.radius,y:ball.posY},0);t<360;t++){var o=ball.posX+ball.radius*Math.cos(t*Math.PI/180),s=ball.posY-ball.radius*Math.sin(t*Math.PI/180);if(o>=l.posX&&o<=l.posX+blockWidth&&s<=l.posY+blockHeight&&s>=l.posY){e=!0,ball.velY*=-1,score+=40-10*l.level+1;break}}return!!e&&(blocks[l.id].active=!1,!0)}function paddlePosition(){paddle.posX+=paddle.velX*interval,paddle.posX=paddle.posX>=canvasWidth-paddle.width?canvasWidth-paddle.width:paddle.posX,paddle.posX=paddle.posX<=0?0:paddle.posX}function ballPhysics(){if(ball.posY+=ball.velY*interval,ball.posX+=ball.velX*interval,ball.posY+ball.radius>=canvasHeight&&(console.log("bottom wall hit"),lifeLost()),ball.posY-ball.radius<=0&&(console.log("top wall hit"),ball.velY*=-1),ball.posX+ball.radius>=canvasWidth&&(console.log("right wall hit"),ball.velX*=-1),ball.posX-ball.radius<=0&&(console.log("left wall hit"),ball.velX*=-1),ball.posY>=canvasHeight-paddleHeight-paddleHeightOffset&&ball.posX-ball.radius<=paddle.posX+paddle.width&&ball.posX+ball.radius>=paddle.posX){console.log("paddle hit"),ball.velY*=-1;var l=ball.posX/(paddle.posX+.5*paddle.width)-1;ball.velX=l>.5?.5:l}}function updateScore(){var l="Score: "+score,e="Lives: "+numLives;ctx.font="30px sans-serif",ctx.fillText(l,10,50),ctx.fillText(e,350,50)}function lifeLost(){numLives--,0==numLives&&gameOver(),ball.posY=ballStart}function gameComplete(){for(var l=0;l<blocks.length;l++)if(blocks[l].active)return!1;return!0}function gameOver(){console.log("Game Over"),clearInterval(game),setTimeout(function(){ctx.clearRect(0,0,canvasWidth,canvasHeight);var l=localStorage.getItem("highScore");score>l?highScore=score:highScore,localStorage.setItem("highScore",highScore),newGameBtn.style.display="inline";var e="GAME OVER",a="Your Score: "+score,t="Your High score: "+highScore;ctx.font="30px sans-serif",ctx.fillText(e,150,50),ctx.fillText(a,150,150),ctx.fillText(t,150,200)},interval)}var canvas=document.getElementById("myCanvas"),canvasOffset=canvas.getBoundingClientRect().left;console.log("offset-left: ",canvasOffset);var canvasHeight=800,canvasWidth=500,ctx=canvas.getContext("2d"),interval=10,blockColors=["red","#064df1","#33f106","#8037dd","yellow"],blockWidth=43,blockHeight=25,paddleHeight=15,paddleHeightOffset=40,paddleSpeed=.5,paddle={posX:(canvasWidth-50)/2,posY:canvasHeight-paddleHeightOffset,velX:0,velY:0,width:100,height:15},ballStart=200,ball={radius:10,posX:400,posY:ballStart,accelX:0,accelY:0,velX:0,velY:.2},score=0,numLives=1,highScore=localStorage.getItem("highScore")||0,newGameBtn=document.getElementById("newGameBtn");canvas.addEventListener("mousemove",function(l){var e=l.clientX-canvasOffset;l.clientY;paddle.posX=e}),document.addEventListener("keydown",function(l){37==l.keyCode?paddle.velX=-paddleSpeed:39==l.keyCode&&(paddle.velX=paddleSpeed)}),document.addEventListener("keyup",function(l){37!=l.keyCode&&39!=l.keyCode||(paddle.velX=0)}),newGameBtn.addEventListener("click",function(l){newGameBtn.style.display="none",blocks=generateInitialBlocks(),numLives=1,score=0,game=setInterval(draw,interval)});
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,s,i){return s&&t(e.prototype,s),i&&t(e,i),e}}();console.log("working");var Game=function(){function t(){_classCallCheck(this,t),this.canvas=document.getElementById("myCanvas"),this.ctx=canvas.getContext("2d"),this.canvasOffset=canvas.getBoundingClientRect().left,this.canvasWidth=500,this.canvasHeight=800,this.interval=10,this.score=0,this.highScore=0,this.numLives=3,this.blockWidth=43,this.blockHeight=25,this.blocks=new Blocks,this.paddle=new Paddle((this.canvasWidth-100)/2,this.canvasHeight-40,this.canvas),this.ball=new Ball(this.canvasWidth/2,400)}return _createClass(t,[{key:"drawBlocks",value:function(){for(var t=0;t<this.blocks.blocksArr.length;t++){var e=this.blocks.blocksArr[t];this.ctx.fillStyle=e.colour,this.ctx.fillRect(e.posX,e.posY,e.width,e.height)}}},{key:"drawPaddle",value:function(){this.ctx.fillStyle=this.paddle.colour,this.ctx.fillRect(this.paddle.posX,this.paddle.posY,this.paddle.width,this.paddle.height)}},{key:"drawBall",value:function(){ctx.beginPath(),ctx.arc(this.ball.posX,this.ball.posY,this.ball.radius,0,2*Math.PI,!1),ctx.fillStyle=this.ball.colour,ctx.fill(),ctx.stroke()}},{key:"drawScreen",value:function(){ctx.clearRect(0,0,canvasWidth,canvasHeight),this.paddle.updatePosition(),this.drawBlocks(),this.drawPaddle(),this.drawBall()}},{key:"startGame",value:function(){var t=this;setInterval(function(){t.drawScreen()},t.interval)}}]),t}(),Ball=function(){function t(e,s){_classCallCheck(this,t),this.colour="white",this.radius=10,this.posX=e,this.posY=s,this.velX=0,this.velY=.2}return _createClass(t,[{key:"updatePosition",value:function(){this.posY+=this.velY*interval,this.posX+=this.velX*interval}},{key:"get",value:function(t){return this[t]}}]),t}(),Paddle=function(){function t(e,s,i){_classCallCheck(this,t),this.colour="black",this.width=100,this.height=15,this.posX=e,this.posY=s,this.velX=0,this.speed=.5,this.canvas=i,this.canvasOffset=i.getBoundingClientRect().left;var a=this;document.addEventListener("keydown",function(t){37==t.keyCode?a.velX=-a.speed:39==t.keyCode&&(a.velX=a.speed)}),document.addEventListener("keyup",function(t){37!=t.keyCode&&39!=t.keyCode||(a.velX=0)}),this.canvas.addEventListener("mousemove",function(t){var e=t.clientX-a.canvasOffset;t.clientY;a.posX=e})}return _createClass(t,[{key:"updatePosition",value:function(){this.posX+=this.velX*interval,this.posX=this.posX>=canvasWidth-this.width?canvasWidth-this.width:this.posX,this.posX=this.posX<=0?0:this.posX}},{key:"get",value:function(t){return this[t]}}]),t}(),Block=function(){function t(e,s,i,a,n,l,h,c){_classCallCheck(this,t),this.id=e,this.level=s,this.active=i,this.colour=a,this.posX=n,this.posY=l,this.width=h,this.height=c}return _createClass(t,[{key:"get",value:function(t){return this[t]}}]),t}(),Blocks=function(){function t(){_classCallCheck(this,t),this.blocksArr=this.generateBlocks()}return _createClass(t,[{key:"generateBlocks",value:function(){for(var t=43,e=25,s=0,i=0,a=["red","#064df1","#33f106","#8037dd","yellow"],n=0,l=[],h=0;h<5;h++){s=12,i+=e+5;for(var c=0;c<10;c++){var o=new Block(n,h,(!0),a[h],s,i,t,e);l.push(o),s+=t+5,n++}}return l}},{key:"get",value:function(t){return console.log(t),this[t]}}]),t}(),game=new Game;game.startGame();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyZWFrb3V0LmpzIiwidGVzdC5qcyJdLCJuYW1lcyI6WyJkcmF3IiwiY3R4IiwiY2xlYXJSZWN0IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInBhZGRsZSIsInBvc1giLCJwb3NZIiwid2lkdGgiLCJoZWlnaHQiLCJyZWZyZXNoQmxvY2tzIiwiYmxvY2tzIiwiYmVnaW5QYXRoIiwiYmFsbCIsInJhZGl1cyIsIk1hdGgiLCJQSSIsImZpbGwiLCJzdHJva2UiLCJ1cGRhdGVTY29yZSIsImJsb2NrV2lkdGgiLCJibG9ja0hlaWdodCIsImluZGV4IiwiYmxvY2tBcnJheSIsImkiLCJqIiwicHVzaCIsImlkIiwiYmxvY2tDb2xvcnMiLCJjb2xvciIsImxldmVsIiwiYWN0aXZlIiwibXVsdGlIaXRzIiwiYmxvY2tIaXQiLCJsZW5ndGgiLCJnYW1lQ29tcGxldGUiLCJnYW1lT3ZlciIsInZlbFkiLCJyZWN0IiwiaGl0IiwiYmxvY2tTZWN0aW9uIiwiYm90dG9tIiwieSIsIngiLCJjb3MiLCJzY29yZSIsImJhbGxQaHlzaWNzIiwidmVsWCIsImludGVydmFsIiwiY29uc29sZSIsImxpZmVMb3N0IiwibG9nIiwicGFkZGxlSGVpZ2h0IiwicGFkZGxlSGVpZ2h0T2Zmc2V0Iiwic2NvcmVNZXNzYWdlIiwibGl2ZU1lc3NhZ2UiLCJmb250IiwiZmlsbFRleHQiLCJzcGVlZCIsIm51bUxpdmVzIiwiYmFsbFN0YXJ0IiwibmV3R2FtZUJ0biIsImNsZWFySW50ZXJ2YWwiLCJtZXNzYWdlMSIsInNldFRpbWVvdXQiLCJtZXNzYWdlMiIsIm1lc3NhZ2UzIiwiZ2V0SXRlbSIsImhpZ2hTY29yZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJhZGRFdmVudExpc3RlbmVyIiwiZ2VuZXJhdGVJbml0aWFsQmxvY2tzIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNhbnZhc09mZnNldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJwYWRkbGVTcGVlZCIsImFjY2VsWCIsImFjY2VsWSIsImV2ZW50IiwiY2xpZW50WSIsImtleUNvZGUiLCJzdHlsZSIsImRpc3BsYXkiLCJnYW1lIiwic2V0SW50ZXJ2YWwiLCJHYW1lIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImdldENvbnRleHQiLCJCbG9ja3MiLCJQYWRkbGUiLCJCYWxsIiwiYmxvY2tzQXJyIiwiYmxvY2siLCJhcmMiLCJjb2xvdXIiLCJkcmF3QmFsbCIsInQiLCJwcm9wZXJ0eSIsImNsaWVudFgiLCJCbG9jayIsImdlbmVyYXRlQmxvY2tzIiwiYmxvY2tDb2xvdXJzIiwic3RhcnRHYW1lIl0sIm1hcHBpbmdzIjoiWUFxQ0EsU0FBU0EsUUFDUkMsSUFBQUMsVUFBQSxFQUFBLEVBQUFDLFlBQUFDLGNBR0FILElBQUFJLFVBQUEsUUFDQUosaUJBR0FBLElBQUFLLFNBQUFDLE9BQUFDLEtBQUFELE9BQUFFLEtBQUFGLE9BQUFHLE1BQUFILE9BQUFJLFFBTUFDLGNBQUFBLGNBQWNDLFFBR2RaLElBQUFhLFlBSUFiLElBQUlJLElBQUFBLEtBQUpHLEtBQWdCTyxLQUFoQk4sS0FBQU0sS0FBQUMsT0FBQSxFQUFBLEVBQUFDLEtBQUFDLElBQUEsR0FDQWpCLElBQUlrQixVQUFKLFFBQ0FsQixJQUFJbUIsT0FBSm5CLElBQUltQixTQU1KQyxjQU1BLFFBQUliLHlCQVFILElBQUEsR0FQR0MsR0FBSmEsV0FGSVgsRUFBU1ksWUFJVEMsRUFBQUEsRUFDQUMsRUFBQUEsRUFFSGpCLEVBQUEsRUFDQUMsS0FDSWlCLEVBQUlDLEVBQVJELEVBQWVDLEVBQUlELElBQUlDLENBQ3RCMUIsRUFBSUksR0FDSkosR0FBSUssRUFBU0UsQ0FDYmlCLEtBQUFBLEdBQUFBLEdBQVdHLEVBQUFBLEVBQU1DLEdBQUlMLElBQ3JCaEIsSUFBQUEsVUFBZ0JzQixZQUFoQkosR0FDQUYsSUFBQUEsU0FBQUEsRUFBQUEsRUFBQUEsRUFBQUEsR0FDQUMsRUFBQUcsTUFBQUMs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QVl0RSxHQUFJRyxPQUFoQlIsRUFBQUUsSUFBK0IyRSxHQUEvQk8sRUFBbURsRyxHQUFBQSxFQUFPQyxFQUFRRCxFQUFBQyxFQUFBYyxHQUFBRyxLQUFBdUUsR0FvQy9EM0YsR0FBUUUsRUFBUSxFQW5DbEJjLEtBSUEsTUFBS2hCLCtCQUlMZ0csR0FzQ0EsTUFEQXJELFNBQVFFLElBQUltRCxHQUNMWCxLQUFLVyxZQU1WZixLQUFPLEdBQUlFLEtBQ2ZGLE1BQUtvQiIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW5pdGlhbGl6ZSBDYW52YXNcbnZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15Q2FudmFzXCIpO1xudmFyIGNhbnZhc09mZnNldCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuY29uc29sZS5sb2coXCJvZmZzZXQtbGVmdDogXCIsIGNhbnZhc09mZnNldCk7XG4vL2NvbnNvbGUubG9nKHJlY3QudG9wLCByZWN0LnJpZ2h0LCByZWN0LmJvdHRvbSwgcmVjdC5sZWZ0KTtcbnZhciBjYW52YXNIZWlnaHQgPSA4MDA7IC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUNhbnZhc1wiKS5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIik7XG52YXIgY2FudmFzV2lkdGggPSA1MDA7IC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUNhbnZhc1wiKS5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtcbnZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xudmFyIGludGVydmFsID0gMTA7XG5cblxuLy8gQmxvY2sgUGFyYW1ldGVyc1xudmFyIGJsb2NrQ29sb3JzID0gWydyZWQnLCAnIzA2NGRmMScsICcjMzNmMTA2JywgJyM4MDM3ZGQnLCAneWVsbG93J107XG52YXIgYmxvY2tXaWR0aCA9IDQzO1xudmFyIGJsb2NrSGVpZ2h0ID0gMjU7XG4vLyBkaWN0aW9uYXJ5IG9mIGJsb2NrIFt7aWQsIHBvc1gsIHBvc1ksIGNvbG9yLCBsZXZlbCwgYWN0aXZlfV1cbi8vdmFyIGJsb2NrcyA9IGdlbmVyYXRlSW5pdGlhbEJsb2NrcygpO1xuXG5cbi8vIFBhZGRsZSBQYXJhbXRlcnNcbnZhciBwYWRkbGVIZWlnaHQgPSAxNTtcbnZhciBwYWRkbGVIZWlnaHRPZmZzZXQgPSA0MDtcbnZhciBwYWRkbGVTcGVlZCA9IDAuNTtcbnZhciBwYWRkbGUgPSB7cG9zWDogKGNhbnZhc1dpZHRoIC0gNTApLzIsIHBvc1k6IGNhbnZhc0hlaWdodCAtIHBhZGRsZUhlaWdodE9mZnNldCwgdmVsWDogMCwgdmVsWTogMCwgd2lkdGg6IDEwMCwgaGVpZ2h0OiAxNX07XG5cbi8vYmFsbCBwYXJhbWV0ZXJzOiByYWRpdWVzLCB4LXBvc2l0aW9uLCB5LXBvc2l0aW9uLCB4LWFjY2VsZXJhdGlvbiwgeS1hY2NlbGVyYXRvaW4sIHgtdmVsb2N0eSwgeS12ZWxvY2l0eVxudmFyIGJhbGxTdGFydCA9IDIwMDtcbnZhciBiYWxsID0ge3JhZGl1czogMTAsIHBvc1g6IDQwMCwgcG9zWTogYmFsbFN0YXJ0LCBhY2NlbFg6IDAsIGFjY2VsWTogMCwgdmVsWDogMCwgdmVsWTogMC4yfTtcblxuLy8gSW5pdGlhbGUgU2NvcmVcbnZhciBzY29yZSA9IDA7XG52YXIgbnVtTGl2ZXMgPSAxO1xudmFyIGhpZ2hTY29yZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaGlnaFNjb3JlXCIpIHx8IDA7XG52YXIgbmV3R2FtZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3R2FtZUJ0blwiKTtcbi8vIFJlZHJhdyBjYW52YXMgMjB4L3MgLT4xLzYwID0gMC4wNXMgPSA1MG1zXG4vL3ZhciBnYW1lID0gc2V0SW50ZXJ2YWwoZHJhdywgaW50ZXJ2YWwpO1xuXG5mdW5jdGlvbiBkcmF3KCkge1xuXHQvL2NsZWFyIGNhbnZhcyBiZWZvcmUgcmVkcmF3aW5nXG5cdGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG5cblx0Ly9kcmF3IHBhZGRsZVxuXHRjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcblx0cGFkZGxlUG9zaXRpb24oKTtcblx0Ly9wYWRkbGUucG9zWCArPSBwYWRkbGUudmVsWCppbnRlcnZhbDtcblx0Ly9wYWRkbGUudmVsWCA9IDA7XG5cdGN0eC5maWxsUmVjdChwYWRkbGUucG9zWCwgcGFkZGxlLnBvc1ksIHBhZGRsZS53aWR0aCwgcGFkZGxlLmhlaWdodCk7XG5cblx0XG5cdFxuXHRiYWxsUGh5c2ljcygpO1xuXHRyZWZyZXNoQmxvY2tzKGJsb2Nrcyk7XG5cblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHQvL2RyYXcgYmFsbFxuXG5cdC8vY2VudGVyKHgseSksIHN0YXJ0IHJhZGlhbiwgZW5kIHJhZGlhblxuXHRjdHguYXJjKGJhbGwucG9zWCwgYmFsbC5wb3NZLCBiYWxsLnJhZGl1cywgMCAsIDIqTWF0aC5QSSwgZmFsc2UpO1xuXHRjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuXHRjdHguZmlsbCgpO1xuXHRjdHguc3Ryb2tlKCk7XG5cblx0Ly8gU2NvcmVcblx0dXBkYXRlU2NvcmUoKTtcblxuXG59XG5cbi8vIGdlbmVyYXRlIGJsb2NrcyBvbiBjYW52YXMgYW5kIHB1c2ggaW50byBibG9jayBkaWN0aW9uYXJ5XG5mdW5jdGlvbiBnZW5lcmF0ZUluaXRpYWxCbG9ja3MoKSB7XG5cdHZhciB3aWR0aCA9IGJsb2NrV2lkdGg7XG5cdHZhciBoZWlnaHQgPSBibG9ja0hlaWdodDtcblx0dmFyIHBvc1ggPSAwO1xuXHR2YXIgcG9zWSA9IDA7XG5cblx0dmFyIGluZGV4ID0gMDtcblx0dmFyIGJsb2NrQXJyYXkgPSBbXVxuXHRmb3IodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG5cdFx0cG9zWCA9IDEyO1xuXHRcdHBvc1kgKz0gaGVpZ2h0ICsgNTtcblx0XHRmb3IodmFyIGogPSAwOyBqIDwgMTA7IGorKykge1x0XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gYmxvY2tDb2xvcnNbaV07XG5cdFx0XHRjdHguZmlsbFJlY3QocG9zWCwgcG9zWSwgd2lkdGgsIGhlaWdodCk7XG5cdFx0XHRibG9ja0FycmF5LnB1c2goe2lkOiBpbmRleCwgcG9zWDogcG9zWCwgcG9zWTogcG9zWSwgY29sb3I6IGJsb2NrQ29sb3JzW2ldLCBsZXZlbDogaSwgYWN0aXZlOiB0cnVlfSk7XG5cdFx0XHRwb3NYICs9IHdpZHRoICsgNTtcblx0XHRcdGluZGV4Kys7XG5cdFx0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXHR9ICAgICAgICAgICAgIFxuXHRyZXR1cm4gYmxvY2tBcnJheTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbn1cblxuLy9yZXJlbmRlciBibG9ja3NcbmZ1bmN0aW9uIHJlZnJlc2hCbG9ja3MoYmxvY2tBcnJheSkge1xuXHR2YXIgbXVsdGlIaXRzID0gMDtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGJsb2NrQXJyYXkubGVuZ3RoOyBpKyspIHtcblx0XHQvL2NoZWNrIGlmIGJsb2NrIGhpdCBieSBiYWxsXG5cdFx0Ly9pZiBiYWxsIGhpdHMgbXVsdGlwbGUgYmxvY2tzIGF0IHNhbWUgdGltZSwgd2FudCB0byBjYW5jZWwgdGhlIGRvdWJsZSBuZWdhdGlvblxuXHRcdGlmKGJsb2NrSGl0KGJsb2NrQXJyYXlbaV0pKSB7XG5cdFx0XHRpZihnYW1lQ29tcGxldGUoKSkgZ2FtZU92ZXIoKTtcblx0XHRcdG11bHRpSGl0cysrO1xuXHRcdFx0aWYobXVsdGlIaXRzID4gMSkgYmFsbC52ZWxZICo9IC0xO1xuXHRcdH1cblx0XHRcblx0XHQvL29ubHkgcmVuZGVyIGJsb2NrcyB0aGF0IGhhdmUgYmVlbiBoaXRcblx0XHRpZihibG9ja0FycmF5W2ldLmFjdGl2ZSkge1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGJsb2NrQXJyYXlbaV0uY29sb3I7XG5cdFx0XHRjdHguZmlsbFJlY3QoYmxvY2tBcnJheVtpXS5wb3NYLCBibG9ja0FycmF5W2ldLnBvc1ksIGJsb2NrV2lkdGgsIGJsb2NrSGVpZ2h0KTtcblx0XHR9XHRcdFxuXHR9XG59XG5cbi8vIENoZWNrIGlmIGJhbGwgaGl0cyBibG9jayBoZWxwZXIgbWV0aG9kXG5mdW5jdGlvbiBibG9ja0hpdChyZWN0KSB7XG5cdHZhciBoaXQgPSBmYWxzZTtcblx0dmFyIGJsb2NrU2VjdGlvbiA9IGJsb2Nrc1tibG9ja3MubGVuZ3RoIC0xIF0ucG9zWSArIGJsb2NrSGVpZ2h0O1xuXHQvL2lmIGJhbGwgaXMgaW4gdGhlIHRvcCBvZiB0aGUgc2NyZWVuXG5cblx0aWYoYmFsbC5wb3NZIC0gYmFsbC5yYWRpdXMgPD0gYmxvY2tTZWN0aW9uICYmIHJlY3QuYWN0aXZlKSB7XG5cdFx0dmFyIHRvcCA9IHt4OiBiYWxsLnBvc1gsIHk6IGJhbGwucG9zWSAtIGJhbGwucmFkaXVzfTtcblx0XHR2YXIgcmlnaHQgPSB7eDogYmFsbC5wb3NYICsgYmFsbC5yYWRpdXMsIHk6IGJhbGwucG9zWX07XG5cdFx0dmFyIGJvdHRvbSA9IHt4OiBiYWxsLnBvc1gsIHk6IGJhbGwucG9zWSArIGJhbGwucmFkaXVzfTtcblx0XHR2YXIgbGVmdCA9IHt4OiBiYWxsLnBvc1ggLSBiYWxsLnJhZGl1cywgeTogYmFsbC5wb3NZfTtcblx0XHQvL2l0ZXJhdGUgb3ZlciB0aGUgY2lyY3VtZmVyZW5jZSBvZiB0aGUgYmFsbCBhbmQgY2hlY2sgaWYgYW55IG9mIHRoZSBwb2ludHMgYXJlIGluc2lkZSB0aGUgcmVjdGFuZ2xlXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IDM2MDsgaSsrKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cdFx0XHR2YXIgeCA9IGJhbGwucG9zWCArIGJhbGwucmFkaXVzICogTWF0aC5jb3MoaSAqIE1hdGguUEkvMTgwKTtcblx0XHRcdHZhciB5ID0gYmFsbC5wb3NZIC0gIGJhbGwucmFkaXVzICogTWF0aC5zaW4oaSAqIE1hdGguUEkvMTgwKTtcblxuXHRcdFx0aWYoeCA+PSByZWN0LnBvc1ggJiYgeCA8PSByZWN0LnBvc1ggKyBibG9ja1dpZHRoKSB7XG5cdFx0XHRcdGlmKHkgPD0gcmVjdC5wb3NZICsgYmxvY2tIZWlnaHQgJiYgeSA+PSByZWN0LnBvc1kpIHtcblx0XHRcdFx0XHRoaXQgPSB0cnVlO1xuXHRcdFx0XHRcdGJhbGwudmVsWSAqPSAtMTtcblx0XHRcdFx0XHRzY29yZSArPSAoNDAgLSAxMCpyZWN0LmxldmVsICsgMSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XHRcdFxuXHR9XG5cdGlmKGhpdCkge1xuXHRcdGJsb2Nrc1tyZWN0LmlkXS5hY3RpdmUgPSBmYWxzZTtcblx0XHRyZXR1cm4gdHJ1ZVxuXHR9IFxuXHRyZXR1cm4gZmFsc2U7XHRcbn1cblxuXG5cbi8vIEV2ZW50IEhhbmRsZXJzIGZvciBwYWRkbGUgY29udHJvbFxuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZXZlbnQpIHtcblx0dmFyIHggPSBldmVudC5jbGllbnRYIC0gY2FudmFzT2Zmc2V0O1xuXHR2YXIgeSA9IGV2ZW50LmNsaWVudFk7XG5cdHBhZGRsZS5wb3NYID0geDtcblx0Ly9jb25zb2xlLmxvZygnbTogJywgeCk7XG59KTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdC8vIG1vdmUgcGFkZGxlIHBvcyBsZWZ0IGlmIGxlZnQgYnV0dG9uIHByZXNzZWRcblx0aWYoZXZlbnQua2V5Q29kZSA9PSAzNykge1xuXHRcdHBhZGRsZS52ZWxYID0gLXBhZGRsZVNwZWVkO1xuXHRcdC8vIGNvbnNvbGUubG9nKCd0Jyk7XG5cdH1cblx0Ly9tb3ZlIHBhZGRsZSBwb3MgcmlnaHQgaWYgcmlnaHQgYnV0dG9uIHByZXNzZWRcblx0ZWxzZSBpZihldmVudC5rZXlDb2RlID09IDM5KSB7XG5cdFx0cGFkZGxlLnZlbFggPSBwYWRkbGVTcGVlZDtcblx0fVxufSk7XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZnVuY3Rpb24oZXZlbnQpIHtcblx0Ly8gbW92ZSBwYWRkbGUgcG9zIGxlZnQgaWYgbGVmdCBidXR0b24gcHJlc3NlZFxuXHRpZihldmVudC5rZXlDb2RlID09IDM3IHx8IGV2ZW50LmtleUNvZGUgPT0gMzkpIHtcblx0XHRwYWRkbGUudmVsWCA9IDA7XG5cdH1cblx0XG59KTtcbmZ1bmN0aW9uIHBhZGRsZVBvc2l0aW9uKCkge1xuXHRwYWRkbGUucG9zWCArPSBwYWRkbGUudmVsWCAqIGludGVydmFsO1xuXHRwYWRkbGUucG9zWCA9IHBhZGRsZS5wb3NYID49IGNhbnZhc1dpZHRoIC0gcGFkZGxlLndpZHRoID8gY2FudmFzV2lkdGggLSBwYWRkbGUud2lkdGggOiBwYWRkbGUucG9zWDtcblx0cGFkZGxlLnBvc1ggPSBwYWRkbGUucG9zWCA8PSAwID8gMCA6IHBhZGRsZS5wb3NYO1xufVxuXG5cblxuZnVuY3Rpb24gYmFsbFBoeXNpY3MoKSB7XG5cblx0Ly8gVXBkYXRlIEJhbGwgcG9zaXRpb25cblx0YmFsbC5wb3NZICs9IGJhbGwudmVsWSAqIGludGVydmFsO1xuXHRiYWxsLnBvc1ggKz0gYmFsbC52ZWxYICogaW50ZXJ2YWw7XG5cdFxuXHQvL2lmIGJhbGwgaGl0cyBib3R0b20gd2FsbFxuXHRpZihiYWxsLnBvc1kgKyBiYWxsLnJhZGl1cyA+PSBjYW52YXNIZWlnaHQpIHtcblx0XHRjb25zb2xlLmxvZygnYm90dG9tIHdhbGwgaGl0Jyk7XG5cdFx0bGlmZUxvc3QoKTtcblx0XHQvL2JhbGwudmVsWSAqPSAtMTtcblx0fVxuXG5cdC8vaWYgYmFsbCBoaXN0IHRvcCB3YWxsXG5cdGlmKGJhbGwucG9zWSAtIGJhbGwucmFkaXVzIDw9IDApIHtcblx0XHRjb25zb2xlLmxvZygndG9wIHdhbGwgaGl0Jyk7XG5cdFx0YmFsbC52ZWxZICo9IC0xO1xuXHR9XG5cblx0Ly9pZiB2YWxsIGhpdHMgcmlnaHQgd2FsbFxuXHRpZihiYWxsLnBvc1ggKyBiYWxsLnJhZGl1cyA+PSBjYW52YXNXaWR0aCkge1xuXHRcdGNvbnNvbGUubG9nKCdyaWdodCB3YWxsIGhpdCcpO1xuXHRcdGJhbGwudmVsWCAqPSAtMTtcblx0fVxuXG5cdC8vaWYgYmFsbCBoaXRzIGxlZnQgd2FsbFxuXHRpZihiYWxsLnBvc1ggLSBiYWxsLnJhZGl1cyA8PSAwKSB7XG5cdFx0Y29uc29sZS5sb2coJ2xlZnQgd2FsbCBoaXQnKTtcblx0XHRiYWxsLnZlbFggKj0gLTE7XG5cdH1cblxuXG5cdC8vYmFsbCBhdCBwYWRkbGUgbGV2ZWxcblx0aWYoYmFsbC5wb3NZID49IGNhbnZhc0hlaWdodCAtIHBhZGRsZUhlaWdodCAtIHBhZGRsZUhlaWdodE9mZnNldCkge1xuXHRcdC8vYmFsbCBoaXRzIHBhZGRsZVxuXHRcdGlmKChiYWxsLnBvc1ggLSBiYWxsLnJhZGl1cyA8PSBwYWRkbGUucG9zWCArIHBhZGRsZS53aWR0aCkgJiYgKGJhbGwucG9zWCArIGJhbGwucmFkaXVzID49IHBhZGRsZS5wb3NYKSkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJwYWRkbGUgaGl0XCIpO1xuXHRcdFx0YmFsbC52ZWxZICo9IC0xO1xuXHRcdFx0dmFyIHNwZWVkID0gYmFsbC5wb3NYLyhwYWRkbGUucG9zWCArIDAuNSpwYWRkbGUud2lkdGgpIC0gMTtcblx0XHRcdGJhbGwudmVsWCA9IHNwZWVkID4gMC41ID8gMC41IDogc3BlZWQ7MTBcblx0XHR9XG5cdH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVNjb3JlKCkge1xuXHR2YXIgc2NvcmVNZXNzYWdlID0gXCJTY29yZTogXCIgKyBzY29yZSBcblx0dmFyIGxpdmVNZXNzYWdlID0gXCJMaXZlczogXCIgKyBudW1MaXZlcztcblx0Y3R4LmZvbnQgPSBcIjMwcHggc2Fucy1zZXJpZlwiO1xuXHRjdHguZmlsbFRleHQoc2NvcmVNZXNzYWdlLCAxMCwgNTApO1xuXHRjdHguZmlsbFRleHQobGl2ZU1lc3NhZ2UsIDM1MCwgNTApO1xuXHRcbn1cbmZ1bmN0aW9uIGxpZmVMb3N0KCkge1xuXHRudW1MaXZlcy0tO1xuXHRpZihudW1MaXZlcyA9PSAwKSB7XG5cdFx0Z2FtZU92ZXIoKTtcblx0fVxuXHRiYWxsLnBvc1kgPSBiYWxsU3RhcnQ7XG59XG5cbmZ1bmN0aW9uIGdhbWVDb21wbGV0ZSgpIHtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGJsb2Nrcy5sZW5ndGg7IGkrKykge1xuXHRcdGlmKGJsb2Nrc1tpXS5hY3RpdmUpIHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGdhbWVPdmVyKCkge1xuXHRjb25zb2xlLmxvZyhcIkdhbWUgT3ZlclwiKTtcblx0Y2xlYXJJbnRlcnZhbChnYW1lKTtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHQvLyBDbGVhciBDYW52YXNcblx0XHRjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuXG5cdFx0XG5cblx0XHR2YXIgY3VyckhpZ2hTY29yZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaGlnaFNjb3JlXCIpO1xuXHRcdHNjb3JlID4gIGN1cnJIaWdoU2NvcmUgPyBoaWdoU2NvcmUgPSBzY29yZSA6IGhpZ2hTY29yZTtcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImhpZ2hTY29yZVwiLCBoaWdoU2NvcmUpO1xuXHRcdG5ld0dhbWVCdG4uc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG5cdFx0XG5cdFx0dmFyIG1lc3NhZ2UxID0gXCJHQU1FIE9WRVJcIjtcblx0XHR2YXIgbWVzc2FnZTIgPSBcIllvdXIgU2NvcmU6IFwiICsgc2NvcmU7IFxuXHRcdHZhciBtZXNzYWdlMyA9IFwiWW91ciBIaWdoIHNjb3JlOiBcIiArIGhpZ2hTY29yZTtcblx0XHRcblx0XHRjdHguZm9udCA9IFwiMzBweCBzYW5zLXNlcmlmXCI7XG5cdFx0Y3R4LmZpbGxUZXh0KG1lc3NhZ2UxLCAxNTAsIDUwKTtcblx0XHRjdHguZmlsbFRleHQobWVzc2FnZTIsIDE1MCwgMTUwKTtcblx0XHRjdHguZmlsbFRleHQobWVzc2FnZTMsIDE1MCwgMjAwKTtcblx0fSwgaW50ZXJ2YWwpO1xuXHRcbn1cbm5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdG5ld0dhbWVCdG4uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRibG9ja3MgPSBnZW5lcmF0ZUluaXRpYWxCbG9ja3MoKTtcblx0bnVtTGl2ZXMgPSAxO1xuXHRzY29yZSA9IDA7XG5cdGdhbWUgPSBzZXRJbnRlcnZhbChkcmF3LCBpbnRlcnZhbCk7XG59KTtcbiIsImNvbnNvbGUubG9nKCd3b3JraW5nJyk7XG5cblxuY2xhc3MgR2FtZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIEdhbWUgU2NyZWVuXG5cdFx0dGhpcy5jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15Q2FudmFzXCIpO1xuXHRcdHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cdFx0dGhpcy5jYW52YXNPZmZzZXQgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcdFxuXHRcdHRoaXMuY2FudmFzV2lkdGggPSA1MDA7XG5cdFx0dGhpcy5jYW52YXNIZWlnaHQgPSA4MDA7XG5cblx0XHQvLyBHYW1lIFNldHRpbmdzXG5cdFx0dGhpcy5pbnRlcnZhbCA9IDEwO1xuXHRcdHRoaXMuc2NvcmUgPSAwO1xuXHRcdHRoaXMuaGlnaFNjb3JlID0gMDtcblx0XHR0aGlzLm51bUxpdmVzID0gMztcblx0XHRcblx0XHQvLyBCbG9ja3MgaW5pdGlhbGl6ZWRcblx0XHR0aGlzLmJsb2NrV2lkdGggPSA0Mztcblx0XHR0aGlzLmJsb2NrSGVpZ2h0ID0gMjU7XG5cdFx0dGhpcy5ibG9ja3MgPSAgbmV3IEJsb2NrcygpO1xuXG5cdFx0Ly8gUGFkZGxlIGluaXRpYWxpemVkIGluIHRoZSBib3R0b20gbWlkZGxlIG9mIHNjcmVlblxuXHRcdHRoaXMucGFkZGxlID0gbmV3IFBhZGRsZSgodGhpcy5jYW52YXNXaWR0aCAtIDEwMCkvMiwgdGhpcy5jYW52YXNIZWlnaHQgLSA0MCwgdGhpcy5jYW52YXMpO1xuXG5cdFx0Ly8gQmFsbCBpbml0aWFsaXplZFxuXHRcdHRoaXMuYmFsbCA9IG5ldyBCYWxsKCh0aGlzLmNhbnZhc1dpZHRoKS8yLCA0MDApO1xuXHR9XG5cblxuXHRkcmF3QmxvY2tzKCkge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2Nrcy5ibG9ja3NBcnIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBibG9jayA9IHRoaXMuYmxvY2tzLmJsb2Nrc0FycltpXTtcdFxuXHRcdFx0dGhpcy5jdHguZmlsbFN0eWxlID0gYmxvY2suY29sb3VyO1xuXHRcdFx0dGhpcy5jdHguZmlsbFJlY3QoYmxvY2sucG9zWCwgYmxvY2sucG9zWSwgYmxvY2sud2lkdGgsIGJsb2NrLmhlaWdodCk7XG5cdFx0fSAgICAgXG5cdH1cblxuXHRkcmF3UGFkZGxlKCkge1xuXHRcdHRoaXMuY3R4LmZpbGxTdHlsZSA9IHRoaXMucGFkZGxlLmNvbG91cjtcblx0XHR0aGlzLmN0eC5maWxsUmVjdCh0aGlzLnBhZGRsZS5wb3NYLCB0aGlzLnBhZGRsZS5wb3NZLCB0aGlzLnBhZGRsZS53aWR0aCwgdGhpcy5wYWRkbGUuaGVpZ2h0KTtcblxuXHR9XG5cblx0ZHJhd0JhbGwoKSB7XG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdC8vY2VudGVyKHgseSksIHN0YXJ0IHJhZGlhbiwgZW5kIHJhZGlhblxuXHRcdGN0eC5hcmModGhpcy5iYWxsLnBvc1gsIHRoaXMuYmFsbC5wb3NZLCB0aGlzLmJhbGwucmFkaXVzLCAwICwgMipNYXRoLlBJLCBmYWxzZSk7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuYmFsbC5jb2xvdXI7XG5cdFx0Y3R4LmZpbGwoKTtcblx0XHRjdHguc3Ryb2tlKCk7XG5cdH1cblxuXHRkcmF3U2NyZWVuKCkge1xuXHRcdC8vY2xlYXIgY2FudmFzIGJlZm9yZSByZWRyYXdpbmdcblx0XHRjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuXG5cdFx0dGhpcy5wYWRkbGUudXBkYXRlUG9zaXRpb24oKTtcblx0XHR0aGlzLmRyYXdCbG9ja3MoKTtcblx0XHR0aGlzLmRyYXdQYWRkbGUoKTtcblx0XHR0aGlzLmRyYXdCYWxsKCk7XG5cdFx0XG5cdH1cblx0c3RhcnRHYW1lKCkge1xuXHRcdHZhciB0ID0gdGhpcztcblx0XHRzZXRJbnRlcnZhbChmdW5jdGlvbigpIHt0LmRyYXdTY3JlZW4oKX0sIHQuaW50ZXJ2YWwpO1xuXHR9XG59XG5cbmNsYXNzIEJhbGwge1xuXHRjb25zdHJ1Y3Rvcihwb3NYLCBwb3NZKSB7XG5cdFx0dGhpcy5jb2xvdXIgPSAnd2hpdGUnO1xuXHRcdHRoaXMucmFkaXVzID0gMTA7XG5cdFx0dGhpcy5wb3NYID0gcG9zWDtcblx0XHR0aGlzLnBvc1kgPSBwb3NZO1xuXHRcdHRoaXMudmVsWCA9IDA7XG5cdFx0dGhpcy52ZWxZID0gMC4yO1xuXHR9XG5cdC8qIFVwZGF0ZSBiYWxsIHBvc2l0aW9uIG9uIGNhbnZhcyovXG5cdHVwZGF0ZVBvc2l0aW9uKCkge1xuXHRcdHRoaXMucG9zWSArPSB0aGlzLnZlbFkgKiBpbnRlcnZhbDtcblx0XHR0aGlzLnBvc1ggKz0gdGhpcy52ZWxYICogaW50ZXJ2YWw7XG5cdH1cblx0Z2V0KHByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIHRoaXNbcHJvcGVydHldO1xuXHR9XG5cdC8qIENoZWNrIGlmIGJhbGwgaGFzIGhpdCB0aGUgcGFkZGxlICovXG5cdC8qIENoZWNrIGlmIGJhbGwgaGFzIGhpdCBhIHdhbGwgKi9cblx0LyogQ2hlY2sgaWYgYmFsbCBoYXMgaGl0IGEgYmxvY2sgKi9cblxufVxuIC8ve3Bvc1g6IChjYW52YXNXaWR0aCAtIDUwKS8yLCBwb3NZOiBjYW52YXNIZWlnaHQgLSBwYWRkbGVIZWlnaHRPZmZzZXQsIHZlbFg6IDAsIHZlbFk6IDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTV9O1xuY2xhc3MgUGFkZGxlIHtcblx0Y29uc3RydWN0b3IocG9zWCwgcG9zWSwgY2FudmFzKSB7XG5cdFx0dGhpcy5jb2xvdXIgPSAnYmxhY2snO1xuXHRcdHRoaXMud2lkdGggPSAxMDA7XG5cdFx0dGhpcy5oZWlnaHQgPSAxNTtcblx0XHR0aGlzLnBvc1ggPSBwb3NYO1xuXHRcdHRoaXMucG9zWSA9IHBvc1k7XG5cdFx0dGhpcy52ZWxYID0gMDtcblx0XHR0aGlzLnNwZWVkID0gMC41O1xuXHRcdHRoaXMuY2FudmFzID0gY2FudmFzO1xuXHRcdHRoaXMuY2FudmFzT2Zmc2V0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHRcblx0XHR2YXIgdCA9IHRoaXM7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFxuXHRcdFx0Ly8gbW92ZSBwYWRkbGUgcG9zIGxlZnQgaWYgbGVmdCBidXR0b24gcHJlc3NlZFxuXHRcdFx0aWYoZXZlbnQua2V5Q29kZSA9PSAzNykge1xuXHRcdFx0XHR0LnZlbFggPSAtdC5zcGVlZDtcblx0XHRcdH1cblx0XHRcdC8vbW92ZSBwYWRkbGUgcG9zIHJpZ2h0IGlmIHJpZ2h0IGJ1dHRvbiBwcmVzc2VkXG5cdFx0XHRlbHNlIGlmKGV2ZW50LmtleUNvZGUgPT0gMzkpIHtcblx0XHRcdFx0dC52ZWxYID0gdC5zcGVlZDtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0Ly8gbW92ZSBwYWRkbGUgcG9zIGxlZnQgaWYgbGVmdCBidXR0b24gcHJlc3NlZFxuXHRcdFx0aWYoZXZlbnQua2V5Q29kZSA9PSAzNyB8fCBldmVudC5rZXlDb2RlID09IDM5KSB7XG5cdFx0XHRcdHQudmVsWCA9IDA7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9KTtcblxuXHRcdC8vIEV2ZW50IEhhbmRsZXJzIGZvciBwYWRkbGUgY29udHJvbFxuXHRcdHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdHZhciB4ID0gZXZlbnQuY2xpZW50WCAtIHQuY2FudmFzT2Zmc2V0O1xuXHRcdFx0dmFyIHkgPSBldmVudC5jbGllbnRZO1xuXHRcdFx0dC5wb3NYID0geDtcblx0XHRcdC8vY29uc29sZS5sb2coJ206ICcsIHgpO1xuXHRcdH0pO1xuXHRcdFxuXHR9XG5cdFxuXHQvKiBVcGRhdGUgcGFkZGxlIHBvc2l0aW9uICovXG5cdHVwZGF0ZVBvc2l0aW9uKCkge1xuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMudmVsWCk7XG5cdFx0dGhpcy5wb3NYICs9IHRoaXMudmVsWCAqIGludGVydmFsO1xuXHRcdHRoaXMucG9zWCA9IHRoaXMucG9zWCA+PSBjYW52YXNXaWR0aCAtIHRoaXMud2lkdGggPyBjYW52YXNXaWR0aCAtIHRoaXMud2lkdGggOiB0aGlzLnBvc1g7XG5cdFx0dGhpcy5wb3NYID0gdGhpcy5wb3NYIDw9IDAgPyAwIDogdGhpcy5wb3NYO1xuXHR9XG5cblx0Z2V0KHByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIHRoaXNbcHJvcGVydHldO1xuXHR9XG5cdFxuXHRcblx0XG59XG5cbmNsYXNzIEJsb2NrIHtcblx0Y29uc3RydWN0b3IoaWQsIGxldmVsLCBhY3RpdmUsIGNvbG91ciwgcG9zWCwgcG9zWSwgd2lkdGgsIGhlaWdodCkge1xuXHRcdHRoaXMuaWQgPSBpZDtcblx0XHR0aGlzLmxldmVsID0gbGV2ZWw7XG5cdFx0dGhpcy5hY3RpdmUgPSBhY3RpdmU7XG5cdFx0dGhpcy5jb2xvdXIgPSBjb2xvdXI7XG5cdFx0dGhpcy5wb3NYID0gcG9zWDtcblx0XHR0aGlzLnBvc1kgPSBwb3NZO1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0fVxuXHRnZXQgKHByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIHRoaXNbcHJvcGVydHldO1xuXHR9XG59XG5cbmNsYXNzIEJsb2NrcyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuYmxvY2tzQXJyID0gdGhpcy5nZW5lcmF0ZUJsb2NrcygpO1xuXHR9XG5cblx0LyogR2VuZXJhdGUgdGhlIGludGlhbCBibG9ja3MgKi9cblx0Z2VuZXJhdGVCbG9ja3MoKSB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJibG9ja3MgZ2VuZXJhdGVkXCIpO1xuXHRcdHZhciB3aWR0aCA9IDQzO1xuXHRcdHZhciBoZWlnaHQgPSAyNTtcblx0XHR2YXIgcG9zWCA9IDA7XG5cdFx0dmFyIHBvc1kgPSAwO1xuXHRcdHZhciBibG9ja0NvbG91cnMgPSBbJ3JlZCcsICcjMDY0ZGYxJywgJyMzM2YxMDYnLCAnIzgwMzdkZCcsICd5ZWxsb3cnXTtcblx0XHR2YXIgaW5kZXggPSAwO1xuXHRcdHZhciBibG9ja0FycmF5ID0gW11cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG5cdFx0XHRwb3NYID0gMTI7XG5cdFx0XHRwb3NZICs9IGhlaWdodCArIDU7XG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgMTA7IGorKykge1x0XG5cdFx0XHRcdHZhciBibG9jayA9IG5ldyBCbG9jayhpbmRleCwgaSwgdHJ1ZSwgYmxvY2tDb2xvdXJzW2ldLCBwb3NYLCBwb3NZLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdFx0YmxvY2tBcnJheS5wdXNoKGJsb2NrKTtcblx0XHRcdFx0cG9zWCArPSB3aWR0aCArIDU7XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHR9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cdFx0fSAgICAgICAgICAgICBcblx0XHQvLyBjb25zb2xlLmxvZyhibG9ja0FycmF5KTtcblx0XHRyZXR1cm4gYmxvY2tBcnJheTsgICAgICAgICAgICAgIFxuXHR9XG5cblxuXHRnZXQgKHByb3BlcnR5KSB7XG5cdFx0Y29uc29sZS5sb2cocHJvcGVydHkpXG5cdFx0cmV0dXJuIHRoaXNbcHJvcGVydHldO1xuXHR9XG59XG5cbi8vIERvIHNoaXQgaGVyZVxuXG52YXIgZ2FtZSA9IG5ldyBHYW1lKCk7XG5nYW1lLnN0YXJ0R2FtZSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
